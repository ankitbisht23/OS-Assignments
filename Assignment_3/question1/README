In this program the philosophers are created using threads and they can only do one of two things either eat or think. For eating each one required two forks and there are only five forks in table so they have to share forks.
In partA using sctict ordering we can resolve this problem. Philosopher eat one at a time.
By using using semaphores multiple philosophers can eat at a time. semaphores uses two main functions:
1. sem_wait(&sem) it prevent  thread to access a resource if it is free to use and locks for another thread to avoid race condition
2. sem_post(&sem) it unlock the given semaphore by permorming the semaphore unlock on the semaphore.
In program A2 forks are semaphores and only one philosopher(thread) can use at a time so we use binary semaphore for forks. if the value of fork is 1 the thread can use it and if its value is 0 it means it is already in use and the thread has to wait for it.
To avoid deadlocks in the program the odd numbered philosophers(1,3,5) picks the right fork first and then left whereas the even numbered philosophers(2,4) picks the left fork first then the right fork.
To run the A1 and A2
type the commands of the terminal:
make
./a1
./a2

In partB there are two sauce bowls and any one of them can be used to eat. For this the counting semaphore is used. semaphore sauce is created and two philosophers can access it at one time as there are two sauce bowls available according to question.
To run B1 and B2
type the commands of the terminal:
make
./b1
./b2
